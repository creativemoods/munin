name: Build
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: build
  cancel-in-progress: false

jobs:
  shellcheck:
    name: Test
    uses: ./.github/workflows/check.yml
  build:
    name: Build
    needs: shellcheck
    runs-on: ubuntu-latest
    permissions:
      actions: write
      packages: write
      contents: read
    steps:
      -
        name: Get remote package data
        run: |
          #!/bin/bash
          package="edge/community/aarch64/munin"
          curl --show-error --fail --silent "https://pkgs.alpinelinux.org/package/$package" --output ./package_data.html
          latest_tag=$(grep -A 3 -i version ./package_data.html | sed -E 's#.*>([0-9\.]+)-r[0-9]+</a>#\1#g' | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
          [ -z "$latest_tag" ] && echo "Tag not found!" && exit 1
          [[ "$latest_tag" = v* ]] && latest_tag="${latest_tag:1}"
          echo "Found tag: \"${latest_tag}\"" 
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - 
        name: Check if the tag exists locally
        uses: action-pack/tag-exists@v1
        id: checkTag
        with: 
          tag: 'v${{ env.latest_tag }}'         
      -
        name: Finish when found
        run: |
          #!/bin/bash
          val="${{ steps.checkTag.outputs.exists }}"
          echo "exists=${val}" >> $GITHUB_ENV
      - 
        name: Checkout
        if: env.exists == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - 
        name: Set up Docker Buildx
        if: env.exists == 'false'
        uses: docker/setup-buildx-action@v3
      -
        name: Login into Docker Hub
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build Docker image
        if: env.exists == 'false'
        id: build
        run: |
          #!/bin/bash
          
          DIRECTORY="."
          VERSION="${{ env.latest_tag }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          PLATFORMS="linux/amd64,linux/arm64"
          BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          TITLE="$(grep --only-matching --perl-regex "(?<=image.title\=).*" $DIRECTORY/Dockerfile | sed -e 's/ /\xc2\xa0/g')"
          DESC="$(grep --only-matching --perl-regex "(?<=image.description\=).*" $DIRECTORY/Dockerfile | sed -e 's/ /\xc2\xa0/g')"

          TAGS=()
          TAGS=("${{ secrets.DOCKERHUB_REPO }}:latest")
          TAGS+=("${{ secrets.DOCKERHUB_REPO }}:${VERSION}")
          TAGS+=("ghcr.io/${{ github.repository }}:latest")
          TAGS+=("ghcr.io/${{ github.repository }}:${VERSION}")

          LABELS=()
          LABELS=("org.opencontainers.image.licenses=MIT")
          LABELS+=("org.opencontainers.image.title=${TITLE}")
          LABELS+=("org.opencontainers.image.description=${DESC}")
          LABELS+=("org.opencontainers.image.version=${VERSION}")
          LABELS+=("org.opencontainers.image.created=${BUILD_DATE}")
          LABELS+=("org.opencontainers.image.revision=${GITHUB_RUN_ID}")
          LABELS+=("org.opencontainers.image.url=https://hub.docker.com/r/${{ secrets.DOCKERHUB_REPO }}")
          LABELS+=("org.opencontainers.image.source=https://github.com/${{ github.repository }}")

          cd "${DIRECTORY}"
          docker buildx build --progress=plain \
            --platform "${PLATFORMS}" \
            --output "type=image,push=true" \
            --build-arg "VERSION_ARG=${VERSION}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            $(printf '%s' "${LABELS[@]/#/ --label }" ) \
            $(printf '%s' "${LABELS[@]/#/ --annotation }" ) \
            $(printf '%s' "${TAGS[@]/#/ --tag }" ) .

          rm -f ${HOME}/.docker/config.json
      -
        name: Create a release
        if: env.exists == 'false'
        uses: action-pack/github-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        with:
          tag: "v${{ steps.build.outputs.version }}"
          title: "v${{ steps.build.outputs.version }}"
      -
       name: Send mail
       if: env.exists == 'false'
       uses: dawidd6/action-send-mail@v3
       with:
         to: ${{secrets.MAILTO}}
         from: Github Actions <${{secrets.MAILTO}}>
         connection_url: ${{secrets.MAIL_CONNECTION}}
         subject: Build of ${{ github.event.repository.name }} v${{ steps.build.outputs.version }} completed
         body: |
              The build job of ${{ github.event.repository.name }} v${{ steps.build.outputs.version }} was completed successfully! 
              
              See https://github.com/${{ github.repository }}/actions for more information.
